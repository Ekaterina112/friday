{"version":3,"sources":["n1-main/m1-ui/common/c1-InputText/UniversalnputText.module.css","n1-main/m1-ui/common/c2-Button/UniversalButton.module.css","n1-main/m1-ui/common/c3-Checkbox/UniversalCheckbox.module.css","n1-main/m1-ui/common/c2-Button/UniversalButton.tsx","n1-main/m1-ui/common/c3-Checkbox/UniversalCheckbox.tsx","n1-main/m1-ui/common/c1-InputText/UniversalInputText.tsx","n1-main/m1-ui/App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","UniversalButton","red","className","restProps","finalClassName","s","default","UniversalCheckbox","type","onChange","onChangeChecked","children","spanClassName","finalInputClassName","checkbox","e","currentTarget","checked","UniversalInputText","value","onChangeText","onKeyPress","onEnter","error","finalSpanClassName","errorInput","superInput","key","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,WAAa,sCAAsC,WAAa,sCAAsC,MAAQ,mC,iBCAhID,EAAOC,QAAU,CAAC,QAAU,iCAAiC,IAAM,6BAA6B,QAAU,mC,gBCA1GD,EAAOC,QAAU,CAAC,SAAW,oCAAoC,cAAgB,2C,qKCyBlEC,EAhByC,SAAC,GAKnD,IAHEC,EAGH,EAHGA,IAAKC,EAGR,EAHQA,UACFC,EAEN,mCACKC,EAAc,UAAMH,EAAMI,IAAEJ,IAAMI,IAAEC,QAAtB,YAAiCJ,GAErD,OACI,oCACIA,UAAWE,GACPD,K,gBCsBDI,EAhC6C,SAAC,GASxD,EAPGC,KAOF,IANEC,EAMH,EANGA,SAAUC,EAMb,EANaA,gBACVR,EAKH,EALGA,UACAS,GAIH,EALcC,cAKd,EAJGD,UAEGR,EAEN,4FAOKU,EAAmB,UAAMR,IAAES,SAAR,YAAoBZ,GAAwB,IAErE,OACI,kCACI,mCACIM,KAAM,WACNC,SAZa,SAACM,GAEtBN,GAAYA,EAASM,GACrBL,GAAmBA,EAAgBK,EAAEC,cAAcC,UAU3Cf,UAAWW,GAEPV,IAEPQ,GAAY,sBAAMT,UAAWG,IAAEO,cAAnB,SAAmCD,Q,gBCmB7CO,EA1C+C,SAAC,GAW1D,EAVCC,MAUD,EATGX,KASF,IAREC,EAQH,EARGA,SAAUW,EAQb,EARaA,aACVC,EAOH,EAPGA,WAAYC,EAOf,EAPeA,QACZC,EAMH,EANGA,MACArB,EAKH,EALGA,UAAWU,EAKd,EALcA,cAGRT,EAEN,qHAcKqB,EAAkB,UAAMnB,IAAEkB,MAAR,YAAiBX,GAAgC,IACnEC,EAAoB,GAAD,OAAIU,EAAQlB,IAAEoB,WAAWpB,IAAEqB,WAA3B,YAAyCxB,GAAsB,IAExF,OACI,qCACI,mCACIM,KAAM,OACNC,SApBa,SAACM,GACtBN,GACGA,EAASM,GACZK,GAAgBA,EAAaL,EAAEC,cAAcG,QAkBrCE,WAhBe,SAACN,GACxBM,GAAcA,EAAWN,GAEf,UAAVA,EAAEY,KACCL,GACAA,KAYKpB,UAAWW,GACPV,IAEPoB,GAAS,sBAAMrB,UAAWsB,EAAjB,SAAsCD,QCrC7CK,MATf,WACI,OAAQ,sBAAK1B,UAAU,MAAf,UACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCIG2B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1893afc6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"UniversalnputText_superInput__1qvSx\",\"errorInput\":\"UniversalnputText_errorInput__1EhZq\",\"error\":\"UniversalnputText_error__mdYev\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"UniversalButton_default__3hv5r\",\"red\":\"UniversalButton_red__3_3du\",\"spanSix\":\"UniversalButton_spanSix__32UoF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"UniversalCheckbox_checkbox__1UwKT\",\"spanClassName\":\"UniversalCheckbox_spanClassName__13Ior\"};","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\nimport s from \"./UniversalButton.module.css\";\n\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n    red?: boolean\n}\n\nconst UniversalButton: React.FC<SuperButtonPropsType> = (\n    {\n        red, className,\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\n    }\n) => {\n    const finalClassName = `${red ? s.red : s.default} ${className}`;\n\n    return (\n        <button\n            className={finalClassName}\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\n        />\n    );\n}\n\nexport default UniversalButton;\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\nimport s from \"./UniversalCheckbox.module.css\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\n    onChangeChecked?: (checked: boolean) => void\n    spanClassName?: string\n};\n\nconst UniversalCheckbox: React.FC<SuperCheckboxPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeChecked,\n        className, spanClassName,\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        // сделайте так чтоб работал onChange и onChangeChecked ???????????????????????\n        onChange && onChange(e);\n        onChangeChecked && onChangeChecked(e.currentTarget.checked);\n    }\n\n    const finalInputClassName = `${s.checkbox} ${className ? className : \"\"}`;\n\n    return (\n        <label>\n            <input\n                type={\"checkbox\"}\n                onChange={onChangeCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\n            />\n            {children && <span className={s.spanClassName}>{children}</span>}\n        </label> // благодаря label нажатие на спан передастся в инпут\n    );\n}\n\nexport default UniversalCheckbox;\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from \"react\";\nimport s from \"./UniversalnputText.module.css\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n};\n\nconst UniversalInputText: React.FC<SuperInputTextPropsType> = (\n    { value,\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeText,\n        onKeyPress, onEnter,\n        error,\n        className, spanClassName,\n\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange // если есть пропс onChange\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\n        onChangeText && onChangeText(e.currentTarget.value);\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n        onKeyPress && onKeyPress(e);\n\n        e.key === \"Enter\" // если нажата кнопка Enter\n        && onEnter // и есть пропс onEnter\n        && onEnter(); // то вызвать его\n    }\n\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : \"\"}`;\n    const finalInputClassName=`${error ? s.errorInput:s.superInput} ${className ? className:\"\"}`\n\n    return (\n        <>\n            <input\n                type={\"text\"}\n                onChange={onChangeCallback}\n                onKeyPress={onKeyPressCallback}\n                className={finalInputClassName}\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n            {error && <span className={finalSpanClassName}>{error}</span>}\n        </>\n    );\n}\n\nexport default UniversalInputText;\n","import React from 'react';\nimport './App.css';\nimport UniversalButton from './common/c2-Button/UniversalButton';\nimport UniversalCheckbox from './common/c3-Checkbox/UniversalCheckbox';\nimport UniversalInputText from './common/c1-InputText/UniversalInputText';\n\nfunction App() {\n    return (<div className=\"App\">\n            <UniversalButton/>\n            <UniversalInputText/>\n            <UniversalCheckbox/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './n1-main/m1-ui/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}